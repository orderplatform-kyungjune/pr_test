# 워크플로우 이름 정의
name: CI/CD DEVELOP

# 지정한 이벤트에 트리거 지정
on:
  pull_request:
    branches: [ develop ]
    types: [ closed ]

# 작업 그룹화
jobs:
  origin_dev:
    # 실행 조건
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'origin') }}
    # 작업이 실행될 runner 유형
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # step 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@v3

      # node npm 설치를 위한 action
      - uses: actions/setup-node@v4
        # action에 node version 전달
        with:
          node-version: "20.x"

      # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v4
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn origin:build:dev

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: yarn deploy:action

      - name: Slack 배포 알림
        uses: 8398a7/action-slack@v3.14.0
        with:
          status: custom
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": '${{ job.status }}' === 'success' ? '#52BF90' : '${{ job.status }}' === 'failure' ? '#FF240D' : '#FFC000',
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": ":t'order: ORIGIN 어드민 DEV UPDATE 알림"
                      }
                    },
                    {
                      "type": "divider"
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*담당자*\n${{ github.event.pull_request.user.login }}"
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*업데이트 내용*\n${{ github.event.pull_request.title }}"
                        }
                      ]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "CI DEV",
                            "emoji": true
                          },
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                        },
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "PR 바로가기",
                            "emoji": true
                          },
                          "url": "${{ github.event.pull_request.html_url }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.RACCOON_SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.

  origin_stage:
    # 실행 조건
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'origin') && contains(github.event.pull_request.labels.*.name, 'stage') }}
    # 작업이 실행될 runner 유형
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # step 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@v3

      # node npm 설치를 위한 action
      - uses: actions/setup-node@v4
        # action에 node version 전달 admin origin korea
        with:
          node-version: "20.x"

      # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v4
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn origin:build:staging

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_STAGING_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: yarn deploy:action

      - name: Slack 배포 알림
        uses: 8398a7/action-slack@v3.14.0
        with:
          status: custom
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": '${{ job.status }}' === 'success' ? '#52BF90' : '${{ job.status }}' === 'failure' ? '#FF240D' : '#FFC000',
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": ":t'order: ORIGIN 어드민 STAGE UPDATE 알림"
                      }
                    },
                    {
                      "type": "divider"
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*담당자*\n${{ github.event.pull_request.user.login }}"
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*업데이트 내용*\n${{ github.event.pull_request.title }}"
                        }
                      ]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "CI STAGE",
                            "emoji": true
                          },
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                        },
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "PR 바로가기",
                            "emoji": true
                          },
                          "url": "${{ github.event.pull_request.html_url }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.RACCOON_SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.

  #  global_dev:
  #    # 실행 조건
  #    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'global') }}
  #    # 작업이 실행될 runner 유형
  #    runs-on: ubuntu-latest
  #
  #    # 작업 단계
  #    steps:
  #      # step 이름 정의
  #      - name: Checkout source code
  #        # repository의 코드를 가져오기 위한 checkout action
  #        uses: actions/checkout@v3
  #
  #      # node npm 설치를 위한 action
  #      - uses: actions/setup-node@v4
  #        # action에 node version 전달
  #        with:
  #          node-version: "20.x"
  #
  #      # node modules 캐싱
  #      - name: Cache node modules
  #        id: node-cache
  #        # 캐싱하기 위한 action
  #        uses: actions/cache@v4
  #        with:
  #          path: node_modules
  #          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
  #          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
  #          # yarn-lock.json을 hashing한 값으로 설정된다.
  #          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
  #          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
  #          restore-keys: |
  #            ${{ runner.OS }}-build-
  #            ${{ runner.OS }}-
  #
  #      - name: Install Dependencies
  #        # key가 같지 않을 때 install
  #        if: steps.node-cache.outputs.cache-hit != 'true'
  #        # shell 명령 실행
  #        run: yarn
  #
  #      - name: Build
  #        run: yarn global:build:dev
  #
  #      - name: Deploy
  #        env:
  #          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_GLOBAL_BUCKET_NAME }}
  #          AWS_REGION: ${{ secrets.AWS_REGION }}
  #        run: yarn deploy:action
  #
  #      - name: Slack 배포 알림
  #        uses: 8398a7/action-slack@v3.14.0
  #        with:
  #          status: custom
  #          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
  #          custom_payload: |
  #            {
  #              "attachments": [
  #                {
  #                  "color": '${{ job.status }}' === 'success' ? '#52BF90' : '${{ job.status }}' === 'failure' ? '#FF240D' : '#FFC000',
  #                  "blocks": [
  #                    {
  #                      "type": "header",
  #                      "text": {
  #                        "type": "plain_text",
  #                        "text": ":earth_asia: GLOBAL 어드민 DEV UPDATE 알림"
  #                      }
  #                    },
  #                    {
  #                      "type": "divider"
  #                    },
  #                    {
  #                      "type": "section",
  #                      "fields": [
  #                        {
  #                          "type": "mrkdwn",
  #                          "text": "*담당자*\n${{ github.event.pull_request.user.login }}"
  #                        }
  #                      ]
  #                    },
  #                    {
  #                      "type": "section",
  #                      "fields": [
  #                        {
  #                          "type": "mrkdwn",
  #                          "text": "*업데이트 내용*\n${{ github.event.pull_request.title }}"
  #                        }
  #                      ]
  #                    },
  #                    {
  #                      "type": "actions",
  #                      "elements": [
  #                        {
  #                          "type": "button",
  #                          "text": {
  #                            "type": "plain_text",
  #                            "text": "CI DEV",
  #                            "emoji": true
  #                          },
  #                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #                        },
  #                        {
  #                          "type": "button",
  #                          "text": {
  #                            "type": "plain_text",
  #                            "text": "PR 바로가기",
  #                            "emoji": true
  #                          },
  #                          "url": "${{ github.event.pull_request.html_url }}"
  #                        }
  #                      ]
  #                    }
  #                  ]
  #                }
  #              ]
  #            }
  #        env:
  #          SLACK_WEBHOOK_URL: ${{ secrets.RACCOON_SLACK_WEBHOOK_URL }} # required
  #        if: always() # Pick up events even if the job fails or is canceled.

  uplus_dev:
    # 실행 조건
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'uplus')}}
    # 작업이 실행될 runner 유형
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # step 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@v3

      # node npm 설치를 위한 action
      - uses: actions/setup-node@v4
        # action에 node version 전달
        with:
          node-version: "20.x"

      # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v4
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn uplus:build:dev

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_UPLUS_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DISTRIBUTION_ID: ${{ secrets.AWS_DEV_UPLUS_DISTRIBUTION_ID }}
        run: yarn deploy:action

      - name: Slack 배포 알림
        uses: 8398a7/action-slack@v3.14.0
        with:
          status: custom
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": '${{ job.status }}' === 'success' ? '#52BF90' : '${{ job.status }}' === 'failure' ? '#FF240D' : '#FFC000',
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": ":uplus: UPLUS 어드민 DEV UPDATE 알림"
                      }
                    },
                    {
                      "type": "divider"
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*담당자*\n${{ github.event.pull_request.user.login }}"
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*업데이트 내용*\n${{ github.event.pull_request.title }}"
                        }
                      ]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "CI DEV",
                            "emoji": true
                          },
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                        },
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "PR 바로가기",
                            "emoji": true
                          },
                          "url": "${{ github.event.pull_request.html_url }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.RACCOON_SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.

  uplus_stage:
    # 실행 조건
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'uplus') && contains(github.event.pull_request.labels.*.name, 'stage') }}
    # 작업이 실행될 runner 유형
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # step 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@v3

      # node npm 설치를 위한 action
      - uses: actions/setup-node@v4
        # action에 node version 전달 admin origin korea
        with:
          node-version: "20.x"

      # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v4
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn uplus:build:staging

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_STAGE_UPLUS_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DISTRIBUTION_ID: ${{ secrets.AWS_STAGE_UPLUS_DISTRIBUTION_ID }}
        run: yarn deploy:action

      - name: Slack 배포 알림
        uses: 8398a7/action-slack@v3.14.0
        with:
          status: custom
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": '${{ job.status }}' === 'success' ? '#52BF90' : '${{ job.status }}' === 'failure' ? '#FF240D' : '#FFC000',
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": ":uplus: UPLUS 어드민 STAGE UPDATE 알림"
                      }
                    },
                    {
                      "type": "divider"
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*담당자*\n${{ github.event.pull_request.user.login }}"
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*업데이트 내용*\n${{ github.event.pull_request.title }}"
                        }
                      ]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "CI STAGE",
                            "emoji": true
                          },
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                        },
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "PR 바로가기",
                            "emoji": true
                          },
                          "url": "${{ github.event.pull_request.html_url }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.RACCOON_SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.

  brand1_dev:
    # 실행 조건
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'brand1')}}
    # 작업이 실행될 runner 유형
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # step 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@v3

      # node npm 설치를 위한 action
      - uses: actions/setup-node@v4
        # action에 node version 전달
        with:
          node-version: "20.x"

      # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v4
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn brand1:build:dev

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_BRAND1_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DISTRIBUTION_ID: ${{ secrets.AWS_DEV_BRAND1_DISTRIBUTION_ID }}
        run: yarn deploy:action

      - name: Slack 배포 알림
        uses: 8398a7/action-slack@v3.14.0
        with:
          status: custom
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": '${{ job.status }}' === 'success' ? '#52BF90' : '${{ job.status }}' === 'failure' ? '#FF240D' : '#FFC000',
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "소상공인 어드민 DEV UPDATE 알림"
                      }
                    },
                    {
                      "type": "divider"
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*담당자*\n${{ github.event.pull_request.user.login }}"
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*업데이트 내용*\n${{ github.event.pull_request.title }}"
                        }
                      ]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "CI DEV",
                            "emoji": true
                          },
                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                        },
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "PR 바로가기",
                            "emoji": true
                          },
                          "url": "${{ github.event.pull_request.html_url }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.RACCOON_SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.

#  brand1_stage:
#    # 실행 조건
#    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'brand1') && contains(github.event.pull_request.labels.*.name, 'stage') }}
#    # 작업이 실행될 runner 유형
#    runs-on: ubuntu-latest
#
#    # 작업 단계
#    steps:
#      # step 이름 정의
#      - name: Checkout source code
#        # repository의 코드를 가져오기 위한 checkout action
#        uses: actions/checkout@v3
#
#      # node npm 설치를 위한 action
#      - uses: actions/setup-node@v4
#        # action에 node version 전달 admin origin korea
#        with:
#          node-version: "20.x"
#
#      # node modules 캐싱
#      - name: Cache node modules
#        id: node-cache
#        # 캐싱하기 위한 action
#        uses: actions/cache@v4
#        with:
#          path: node_modules
#          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
#          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
#          # yarn-lock.json을 hashing한 값으로 설정된다.
#          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
#          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
#          restore-keys: |
#            ${{ runner.OS }}-build-
#            ${{ runner.OS }}-
#
#      - name: Install Dependencies
#        # key가 같지 않을 때 install
#        if: steps.node-cache.outputs.cache-hit != 'true'
#        # shell 명령 실행
#        run: yarn
#
#      - name: Build
#        run: yarn brand1:build:staging
#
#      - name: Deploy
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_BUCKET_NAME: ${{ secrets.AWS_STAGE_BRAND1_BUCKET_NAME }}
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#          AWS_DISTRIBUTION_ID: ${{ secrets.AWS_STAGE_BRAND1_DISTRIBUTION_ID }}
#        run: yarn deploy:action
#
#      - name: Slack 배포 알림
#        uses: 8398a7/action-slack@v3.14.0
#        with:
#          status: custom
#          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
#          custom_payload: |
#            {
#              "attachments": [
#                {
#                  "color": '${{ job.status }}' === 'success' ? '#52BF90' : '${{ job.status }}' === 'failure' ? '#FF240D' : '#FFC000',
#                  "blocks": [
#                    {
#                      "type": "header",
#                      "text": {
#                        "type": "plain_text",
#                        "text": "소상공인 어드민 STAGE UPDATE 알림"
#                      }
#                    },
#                    {
#                      "type": "divider"
#                    },
#                    {
#                      "type": "section",
#                      "fields": [
#                        {
#                          "type": "mrkdwn",
#                          "text": "*담당자*\n${{ github.event.pull_request.user.login }}"
#                        }
#                      ]
#                    },
#                    {
#                      "type": "section",
#                      "fields": [
#                        {
#                          "type": "mrkdwn",
#                          "text": "*업데이트 내용*\n${{ github.event.pull_request.title }}"
#                        }
#                      ]
#                    },
#                    {
#                      "type": "actions",
#                      "elements": [
#                        {
#                          "type": "button",
#                          "text": {
#                            "type": "plain_text",
#                            "text": "CI STAGE",
#                            "emoji": true
#                          },
#                          "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#                        },
#                        {
#                          "type": "button",
#                          "text": {
#                            "type": "plain_text",
#                            "text": "PR 바로가기",
#                            "emoji": true
#                          },
#                          "url": "${{ github.event.pull_request.html_url }}"
#                        }
#                      ]
#                    }
#                  ]
#                }
#              ]
#            }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.RACCOON_SLACK_WEBHOOK_URL }} # required
#        if: always() # Pick up events even if the job fails or is canceled.e job fails or is canceled.
