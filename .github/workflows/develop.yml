# 워크플로우 이름 정의
name: CI/CD DEVELOP

# 지정한 이벤트에 트리거 지정
on:
  pull_request:
    branches: [ develop ]
    types: [ closed ]

# 작업 그룹화
jobs:
  origin_dev:
    # 실행 조건
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'origin') }}
    # 작업이 실행될 runner 유형
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # step 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@v3

      # node npm 설치를 위한 action
      - uses: actions/setup-node@v4
        # action에 node version 전달
        with:
          node-version: "20.x"

      # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v4
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn origin:build:dev

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: yarn deploy:action

  origin_stage:
    # 실행 조건
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'origin') && contains(github.event.pull_request.labels.*.name, 'stage') }}
    # 작업이 실행될 runner 유형
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # step 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@v3

      # node npm 설치를 위한 action
      - uses: actions/setup-node@v4
        # action에 node version 전달 admin origin korea
        with:
          node-version: "20.x"

      # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v4
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn origin:build:staging

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_STAGING_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: yarn deploy:action

  uplus_dev:
    # 실행 조건
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'uplus')}}
    # 작업이 실행될 runner 유형
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # step 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@v3

      # node npm 설치를 위한 action
      - uses: actions/setup-node@v4
        # action에 node version 전달
        with:
          node-version: "20.x"

      # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v4
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn uplus:build:dev

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_UPLUS_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DISTRIBUTION_ID: ${{ secrets.AWS_DEV_UPLUS_DISTRIBUTION_ID }}
        run: yarn deploy:action

  uplus_stage:
    # 실행 조건
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'uplus') && contains(github.event.pull_request.labels.*.name, 'stage') }}
    # 작업이 실행될 runner 유형
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # step 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@v3

      # node npm 설치를 위한 action
      - uses: actions/setup-node@v4
        # action에 node version 전달 admin origin korea
        with:
          node-version: "20.x"

      # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v4
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn uplus:build:stage

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_STAGE_UPLUS_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DISTRIBUTION_ID: ${{ secrets.AWS_STAGE_UPLUS_DISTRIBUTION_ID }}
        run: yarn deploy:action

  brand1_dev:
    # 실행 조건
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'brand1')}}
    # 작업이 실행될 runner 유형
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # step 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@v3

      # node npm 설치를 위한 action
      - uses: actions/setup-node@v4
        # action에 node version 전달
        with:
          node-version: "20.x"

      # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v4
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn brand1:build:dev

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_BRAND1_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DISTRIBUTION_ID: ${{ secrets.AWS_DEV_BRAND1_DISTRIBUTION_ID }}
        run: yarn deploy:action