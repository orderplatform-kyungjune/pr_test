name: github action bot

on:
  workflow_call:

jobs:
  # D-DAY 라벨 생성
  add-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}
      # D-5 라벨 생성
      - name: add D-5 label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            async function addLabel() { 
              try {
                const prNumber = context.payload.pull_request.number;
                const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber
                });

                if (labels.some(label => label.name.startsWith('D-'))) {
                  console.log('D- label already exists.');
                  return;
                }

                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  labels: ['D-5'],
                });
                console.log('Label D-5 added.');
              } catch (error) {
                console.error('Error adding labels:', error);
              }
            };
            addLabel();

  # D-DAY 라벨 삭제
  remove-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_review' || github.event.schedule == '1 15 * * 0-4'
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}

      # D-DAY 라벨 삭제
      - name: remove D- labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            async function removeLabels() {
              console.log(context.payload.pull_request)
              const prNumber = context.payload.pull_request.number;
              const { owner, repo } = context.repo;

              const { data: reviews } = await github.rest.pulls.listReviews({
                owner,
                repo,
                pull_number: prNumber
              });

              const reviewerStates = new Map();

              for (const review of reviews) {
                reviewerStates.set(review.user.login, review.state);
              }

              const uniqueApprovers = new Set(
                [...reviewerStates.entries()]
                  .filter(([user, state]) => state === 'APPROVED')
                  .map(([user, state]) => user)
              );

              if (uniqueApprovers.size < 2) {
                console.log('Less than 2 unique approvals, no labels removed.');
                return;
              }

              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner,
                repo,
                issue_number: prNumber
              });

              for (const label of labels) {
                if (label.name.startsWith('D-')) {
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: prNumber,
                    name: label.name
                  });
                  console.log(`Label ${label.name} removed.`);
                }
              }
            }
            
            removeLabels().catch(error => {
              console.error('Error removing labels:', error);
              process.exit(1);
            });

  # D-DAY label 업데이트 (ex. D-5 => D-4)
  update-label:
    runs-on: ubuntu-latest
    if: github.event.schedule == '1 15 * * 0-4'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 모든 PR의 라벨 가져옴
      - name: get PR labels
        id: pr-labels
        uses: actions/github-script@v7
        with:
          script: |
            async function getLabels() {
              const { data: pullRequests } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open'
              });

              const labelsByPR = {};

              for (const pr of pullRequests) {
                const prNumber = pr.number;
                const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber
                });

                labelsByPR[prNumber] = labels.map(label => label.name);
              }

              core.setOutput('labelsByPR', JSON.stringify(labelsByPR));  
            }
            
            getLabels();

      # 가져온 PR의 라벨중 "D-"로 시작하는 라벨 업데이트 (ex. D-5 => D-4)
      - name: update labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            async function updateLabels() {
              try {
                const labelsByPR = JSON.parse(process.env.LABELS_BY_PR);

                for (const prNumber in labelsByPR) {
                  const DLabels = labelsByPR[prNumber].filter(prLabel => prLabel.startsWith('D-'));

                  if (DLabels.length < 1) {
                    continue;
                  }

                  for (const DLabel of DLabels) {
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: prNumber,
                      name: DLabel
                    });
                  } 

                  const biggestLabelNumber = Math.max(...DLabels.map(DLabel => parseInt(DLabel.slice(2))));
                  const newLabel = `D-${biggestLabelNumber < 1 ? 0 : biggestLabelNumber - 1}`;
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    labels: [newLabel]
                  });

                  console.log(`PR:${prNumber}, "D-" Label updated to "${newLabel}"`);
                }
              } catch (error) {
                console.error('Error updating labels:', error);
              }
            }

            updateLabels();
        env:
          LABELS_BY_PR: ${{ steps.pr-labels.outputs.labelsByPR }}

  # "D-"로 시작하는 라벨이 있는 PR 목록 slack 채널로 알림
  notify-slack:
    runs-on: ubuntu-latest
    if: github.event.schedule == '59 22 * * 0-4'
    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      # "D-"로 시작하는 라벨이 있는 PR 목록을 순서대로 나열함
      - name: get pull requests
        id: get-prs
        uses: actions/github-script@v7
        with:
          script: |
            // PR 목록 가져오기
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            // label color
            let colorMap = {
              'D-0': '#B60205', // 빨간색
              'D-1': '#D93F0B', // 주황색
              'D-2': '#FBCA04', // 노랑색
            };
            
            let prBlocks = await Promise.all(pullRequests.map(async (pullRequest) => {
              const { number, title, created_at } = pullRequest;
              const link = `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${number}`;
              const createdAt = new Date(created_at).toLocaleDateString('ko-KR');
            
              // 라벨 가져오기
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: number
              });
            
              // D- 라벨 찾기
              let color = '#0E8A16'; // 기본 색상 (초록색)
              let labelNumber = Infinity;
              let labelText = '';
              let hasDLabel = false;
              labels.forEach(label => {
                if (label.name.startsWith('D-')) {
                  const num = Number(label.name.slice(2));
                  if (!isNaN(num) && num < labelNumber) {
                    labelNumber = num;
                    color = colorMap[label.name] || color;
                    labelText = label.name;
                    hasDLabel = true;
                  }
                }
              });
            
              if (!hasDLabel) {
                return null;
              }
            
              return {
                labelNumber, // D- 뒤에 붙는 숫자
                block: {
                  "color": color,
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": `*[${labelText}] <${link}|${title}>*\n#${number} opened on ${createdAt} by ${pullRequest.user.login}`
                      }
                    }
                  ]
                }
              };
            }));
            
            // null 값 제거
            prBlocks = prBlocks.filter(prBlock => prBlock !== null);
            
            // 라벨의 D- 뒤에 붙는 숫자가 적은 순서대로 정렬
            prBlocks.sort((a, b) => a.labelNumber - b.labelNumber);
            
            if (prBlocks.length === 0) {
              core.setOutput('hasPrs', 'false');
            } else {
              core.setOutput('hasPrs', 'true');
              core.setOutput('prBlocks', JSON.stringify(prBlocks.map(prBlock => prBlock.block)));
              core.setOutput('prCount', prBlocks.length);
            }

      # 가져온 PR 목록을 슬랙 채널에 알림
      - name: Notify Slack
        if: steps.get-prs.outputs.hasPrs == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          mention: "here"
          custom_payload: |
            {
              "text": `<!here> *${{ steps.get-prs.outputs.prCount }}개*의 pull request가 여러분의 리뷰를 기다리고 있어요`,
              "attachments": [
                {
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "${{ github.repository }}"
                      }
                    },
                    {
                      "type": "divider"
                    }
                  ]
                },
                ...${{ steps.get-prs.outputs.prBlocks }}
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # "v"로 시작하는 태그를 감지하여 main 브랜치에 머지된 PR 목록을 기반으로 release-note 만듬
  create_release_note:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      # 이전 태그의 sha 가져오기
      - name: get previous tag
        id: get_previous_tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            // 최근 100개의 tag 가져오기
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            // 현재 태그 추출
            const currentTag = context.ref.replace('refs/tags/', '');
            // 현재 태그 index 추출
            const currentIndex = tags.findIndex(tag => tag.name === currentTag);

            // 현재 태그가 목록에 없거나 현재 태그가 가장 오래된 태그인 경우, 이전 태그가 없다고 판단
            if (currentIndex === -1 || currentIndex === tags.length - 1) {
              core.exportVariable('PREVIOUS_TAG_SHA', '');
              console.log('No previous tag found or current tag is the oldest tag.');
              return
            }

            const previousTag = tags[currentIndex + 1];
            
            // 이전 태그의 커밋 SHA를 PREVIOUS_TAG_SHA 환경 변수로 설정
            core.exportVariable('PREVIOUS_TAG_SHA', previousTag.commit.sha);
            console.log('Previous Tag:', previousTag.name);

      # 해당 태그의 병합된 PR 목록 가져오기
      - name: get merged pull requests
        id: get_merged_prs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            // 이전 태그의 SHA 가져오기
            const previousTagSha = process.env.PREVIOUS_TAG_SHA;
            
            // 이전 태그가 없을경우 PR이 없음을 표시
            if (!previousTagSha) {
              console.log('No previous tag found.');
              core.exportVariable('MERGED_PR_TITLES', '');
              return;
            }
            
            // 이전 태그와 현재 커밋 사이의 모든 커밋정보 가져오기
            const { data: commitsData } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: previousTagSha,
              head: context.sha
            });

            const mergedPRs = [];

            // 이전 태그와 현재 커밋 사이의 모든 커밋을 확인
            for (const commitData of commitsData.commits) {
              // PR이 병합된 커밋인지 확인
              if (commitData.commit.message.includes('Merge pull request')) {
                // PR 번호 추출
                const prNumber = commitData.commit.message.match(/#(\d+)/)[1];
                // 해당 PR 정보 가져오기
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                // 병합된 PR 목록에 추가
                mergedPRs.push(pr);
              }
            }

            if (mergedPRs.length === 0) {
              core.exportVariable('MERGED_PR_TITLES', '');
              console.log('No merged pull requests found.');
              return
            }

            const featurePRs = [];
            const releasePRs = [];
            const etcPRs = [];

            // PR을 유형별로 분류 (feature, release, etc)
            for (const mergedPR of mergedPRs) {
              const { number, title, user } = mergedPR

              if (title.includes('Feature/') || title.includes('feature/')) {
                featurePRs.push(`- #${number} ${title} by @${user.login}`);
              } else if (title.includes('Release/') || title.includes('release/')) {
                releasePRs.push(`- #${number} ${title} by @${user.login}`);
              } else {
                etcPRs.push(`- #${number} ${title} by @${user.login}`);
              }
            }

            // PR 제목 형식화
            let prTitles = '';
            if (releasePRs.length > 0) {
              prTitles += `### RELEASE\n${releasePRs.join('\n')}\n\n`;
            }
            if (featurePRs.length > 0) {
              prTitles += `### FEATURE\n${featurePRs.join('\n')}\n\n`;
            }
            if (etcPRs.length > 0) {
              prTitles += `### ETC\n${etcPRs.join('\n')}\n\n`;
            }
            
            // 환경 변수에 저장
            core.exportVariable('MERGED_PR_TITLES', prTitles);

      # 빈 릴리즈 생성
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 릴리즈 노트 업데이트
      - name: update release notes
        id: update_notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const prTitles = process.env.MERGED_PR_TITLES;
            if (!prTitles) {
              console.log('No merged pull requests found.');
              return;
            }

            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', ''),
            });

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: `${prTitles}`,
            });

            core.exportVariable('RELEASE_URL', release.html_url);

      # 릴리스 URL 출력
      - name: output release url
        run: |
          echo "Release URL: $RELEASE_URL"