name: deploy develop

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'branch to deploy'
        required: true
        default: 'develop'
        type: string
      label:
        description: 'label to deploy'
        required: true
        default: 'TORDER'
        type: choice
        options:
          - ALL
          - TORDER
          - UPLUS
          - BRAND1

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      branch_exists: ${{ steps.check_branch.outputs.branch_exists }}
      branch_name: ${{ steps.check_branch.outputs.branch_name }}
    steps:
      - name: check if branch exists
        id: check_branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ github.event.inputs.branch }}';
            const { data: branch } = await github.request('GET /repos/{owner}/{repo}/branches/{branch}', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: branchName
            });
            
            if (branch) {
              core.setOutput('branch_exists', 'true');
              core.setOutput('branch_name', branchName);
            } else {
              core.setOutput('branch_exists', 'false');
            }

  build:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.branch_exists == 'true' }}
    steps:
      - name: check out branch
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup.outputs.branch_name }}

      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: cache node modules
        id: node-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.OS }}-admin-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: install dependencies
        run: yarn

      - name: TORDER
        if: ${{ github.event.inputs.label == 'TORDER' || github.event.inputs.label == 'ALL' }}
        run: |
          echo "building for TORDER"
          yarn origin:build:dev

      - name: UPLUS
        if: ${{ github.event.inputs.label == 'UPLUS' || github.event.inputs.label == 'ALL' }}
        run: |
          echo "building for UPLUS"
          yarn uplus:build:dev

      - name: BRAND1
        if: ${{ github.event.inputs.label == 'BRAND1' || github.event.inputs.label == 'ALL' }}
        run: |
          echo "building for BRAND1"
          yarn brand1:build:dev

      - name: Set branch exists flag
        id: set_branch_exists
        run: echo "::set-output name=build_success::true"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.build_success == 'true' }}
    steps:
      - name: TORDER
        if: ${{ github.event.inputs.label == 'TORDER' || github.event.inputs.label == 'ALL' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DISTRIBUTION_ID: ''
        run: |
          echo "deploying to TORDER"
          yarn deploy:action

      - name: UPLUS
        if: ${{ github.event.inputs.label == 'UPLUS' || github.event.inputs.label == 'ALL' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_UPLUS_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DISTRIBUTION_ID: ${{ secrets.AWS_DEV_UPLUS_DISTRIBUTION_ID }}
        run: |
          echo "deploying to UPLUS"
          yarn deploy:action

      - name: BRAND1
        if: ${{ github.event.inputs.label == 'BRAND1' || github.event.inputs.label == 'ALL' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_BRAND1_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DISTRIBUTION_ID: ${{ secrets.AWS_DEV_BRAND1_DISTRIBUTION_ID }}
        run: |
          echo "deploying to BRAND1"
          yarn deploy:action