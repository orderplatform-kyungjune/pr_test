name: CICD development

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'branch to deploy'
        required: true
        default: 'develop'
        type: string
      label:
        description: 'label to deploy'
        required: true
        default: 'TORDER'
        type: choice
        options:
          - ALL
          - TORDER
          - UPLUS
          - BRAND1

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.check_branch.outputs.branch_name }}
    steps:
      - name: check if branch exists
        id: check_branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const branchName = '${{ github.event.inputs.branch }}';
            console.log('branchName', branchName);
            
            const { data: branch } = await github.request('GET /repos/{owner}/{repo}/branches/{branch}', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: branchName
            });
            
            if (branch) {
              core.setOutput('branch_name', branchName);
            }

      - name: check out branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.check_branch.outputs.branch_name }}

      - name: setup node version
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

  cache_node_modules:
    runs-on: ubuntu-latest
    steps:
      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn

  build:
    runs-on: ubuntu-latest
    needs: [setup, cache_node_modules]
    steps:
      - name: check out branch
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup.outputs.branch_name }}

      - name: build
        run: |
          echo "building for ${{ inputs.label }}"
          yarn ${{ inputs.build_command }}

      - name: Save dist cache
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-dist-${{ github.sha }}-${{ job.name }}-${{ github.workflow }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: check out branch
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.setup.outputs.branch_name }}

      - name: Restore dist cache
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-dist-${{ github.sha }}-${{ job.name }}-${{ github.workflow }}

      - name: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DISTRIBUTION_ID: ${{ secrets.AWS_DISTRIBUTION_ID }}
        run: |
          echo "deploying to ${{ inputs.label }}"
          yarn deploy:action

  #----------------------------------------------------------- dynamic jobs
  build_torder:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.label == 'TORDER' || github.event.inputs.label == 'ALL' }}
    steps:
      - name: Set build command
        id: set_build_command
        run: echo "build_command=origin:build:dev" >> $GITHUB_ENV

  deploy_torder:
    runs-on: ubuntu-latest
    needs: build_torder
    if: ${{ github.event.inputs.label == 'TORDER' || github.event.inputs.label == 'ALL' }}
    steps:
      - name: Set AWS settings
        id: set_aws_settings
        run: echo "AWS_BUCKET_NAME=${{ secrets.AWS_DEV_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "AWS_DISTRIBUTION_ID=${{ secrets.AWS_DEV_DISTRIBUTION_ID }}" >> $GITHUB_ENV

  build_uplus:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.label == 'UPLUS' || github.event.inputs.label == 'ALL' }}
    steps:
      - name: Set build command
        id: set_build_command
        run: echo "build_command=uplus:build:dev" >> $GITHUB_ENV

  deploy_uplus:
    runs-on: ubuntu-latest
    needs: build_uplus
    if: ${{ github.event.inputs.label == 'UPLUS' || github.event.inputs.label == 'ALL' }}
    steps:
      - name: Set AWS settings
        id: set_aws_settings
        run: echo "AWS_BUCKET_NAME=${{ secrets.AWS_DEV_UPLUS_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "AWS_DISTRIBUTION_ID=${{ secrets.AWS_DEV_UPLUS_DISTRIBUTION_ID }}" >> $GITHUB_ENV

  build_brand1:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.label == 'BRAND1' || github.event.inputs.label == 'ALL' }}
    steps:
      - name: Set build command
        id: set_build_command
        run: echo "build_command=brand1:build:dev" >> $GITHUB_ENV

  deploy_brand1:
    runs-on: ubuntu-latest
    needs: build_brand1
    if: ${{ github.event.inputs.label == 'BRAND1' || github.event.inputs.label == 'ALL' }}
    steps:
      - name: Set AWS settings
        id: set_aws_settings
        run: echo "AWS_BUCKET_NAME=${{ secrets.AWS_DEV_BRAND1_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "AWS_DISTRIBUTION_ID=${{ secrets.AWS_DEV_BRAND1_DISTRIBUTION_ID }}" >> $GITHUB_ENV