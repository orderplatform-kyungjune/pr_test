name: Manage PR Labels and Notify Slack

on:
  workflow_call:

jobs:
  add-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}

      - name: add D-5 label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            async function addLabel() { 
              try {
                const prNumber = context.payload.pull_request.number;
                const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber
                });

                if (labels.some(label => label.name.startsWith('D-'))) {
                  console.log('D- label already exists.');
                  return;
                }

                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  labels: ['D-5'],
                });
                console.log('Label D-5 added.');
              } catch (error) {
                console.error('Error adding labels:', error);
              }
            };
            addLabel();



  remove-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_review'
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}

      - name: remove D- labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            async function removeLabels() {
              const prNumber = context.payload.pull_request.number;
              const { owner, repo } = context.repo;

              const { data: reviews } = await github.rest.pulls.listReviews({
                owner,
                repo,
                pull_number: prNumber
              });

              const reviewerStates = new Map();

              for (const review of reviews) {
                reviewerStates.set(review.user.login, review.state);
              }

              const uniqueApprovers = new Set(
                [...reviewerStates.entries()]
                  .filter(([user, state]) => state === 'APPROVED')
                  .map(([user, state]) => user)
              );

              if (uniqueApprovers.size < 2) {
                console.log('Less than 2 unique approvals, no labels removed.');
                return;
              }

              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner,
                repo,
                issue_number: prNumber
              });

              for (const label of labels) {
                if (label.name.startsWith('D-')) {
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: prNumber,
                    name: label.name
                  });
                  console.log(`Label ${label.name} removed.`);
                }
              }
            }
            
            removeLabels().catch(error => {
              console.error('Error removing labels:', error);
              process.exit(1);
            });



  notify-slack:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '59 22 * * 1-5'
    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - name: get pull requests
        id: get-prs
        uses: actions/github-script@v7
        with:
          script: |
            // PR 목록 가져오기
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            // label color
            let colorMap = {
              'D-0': '#ff0000', // 빨간색
              'D-1': '#ff8c00', // 주황색
              'D-2': '#ffff00', // 노랑색
            };
            
            let prBlocks = await Promise.all(pullRequests.map(async (pullRequest) => {
              const { number, title, created_at } = pullRequest;
              const link = `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${number}`;
              const createdAt = new Date(created_at).toLocaleDateString('ko-KR');
            
              // 라벨 가져오기
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: number
              });
            
              // D- 라벨 찾기
              let color = '#36a64f'; // 기본 색상 (초록색)
              let labelNumber = Infinity;
              let labelText = '';
              let hasDLabel = false;
              labels.forEach(label => {
                if (label.name.startsWith('D-')) {
                  const num = Number(label.name.slice(2));
                  if (!isNaN(num) && num < labelNumber) {
                    labelNumber = num;
                    color = colorMap[label.name] || color;
                    labelText = label.name;
                    hasDLabel = true;
                  }
                }
              });
            
              if (!hasDLabel) {
                return null;
              }
            
              return {
                labelNumber, // D- 뒤에 붙는 숫자
                block: {
                  "color": color,
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": `*[${labelText}] <${link}|${title}>*\n#${number} opened on ${createdAt} by ${pullRequest.user.login}`
                      }
                    }
                  ]
                }
              };
            }));
            
            // null 값 제거
            prBlocks = prBlocks.filter(prBlock => prBlock !== null);
            
            // 라벨의 D- 뒤에 붙는 숫자가 적은 순서대로 정렬
            prBlocks.sort((a, b) => a.labelNumber - b.labelNumber);
            
            if (prBlocks.length === 0) {
              core.setOutput('hasPrs', 'false');
            } else {
              core.setOutput('hasPrs', 'true');
              core.setOutput('prBlocks', JSON.stringify(prBlocks.map(prBlock => prBlock.block)));
              core.setOutput('prCount', prBlocks.length);
            }

      - name: Notify Slack
        if: steps.get-prs.outputs.hasPrs == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          mention: "here"
          custom_payload: |
            {
              "text": "<!here> *${{ steps.get-prs.outputs.prCount }}개*의 pull request가 여러분의 리뷰를 기다리고 있어요",
              "attachments": [
                {
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "${{ github.repository }}"
                      }
                    },
                    {
                      "type": "divider"
                    }
                  ]
                },
                ...${{ steps.get-prs.outputs.prBlocks }}
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  update-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '1 15 * * 1-5'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: get PR labels
        id: pr-labels
        uses: actions/github-script@v7
        with:
          script: |
            async function getLabels() {
              const { data: pullRequests } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open'
              });

              const labelsByPR = {};

              for (const pr of pullRequests) {
                const prNumber = pr.number;
                const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber
                });

                labelsByPR[prNumber] = labels.map(label => label.name);
              }

              core.setOutput('labelsByPR', JSON.stringify(labelsByPR));  
            }
            
            getLabels();

      - name: update labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            async function updateLabels() {
              try {
                const labelsByPR = JSON.parse(process.env.LABELS_BY_PR);

                for (const prNumber in labelsByPR) {
                  const DLabels = labelsByPR[prNumber].filter(prLabel => prLabel.startsWith('D-'));

                  if (DLabels.length < 1) {
                    continue;
                  }

                  for (const DLabel of DLabels) {
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: prNumber,
                      name: DLabel
                    });
                  } 

                  const biggestLabelNumber = Math.max(...DLabels.map(DLabel => parseInt(DLabel.slice(2))));
                  const newLabel = `D-${biggestLabelNumber < 1 ? 0 : biggestLabelNumber - 1}`;
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    labels: [newLabel]
                  });

                  console.log(`PR:${prNumber}, "D-" Label updated to "${newLabel}"`);
                }
              } catch (error) {
                console.error('Error updating labels:', error);
              }
            }

            updateLabels();
        env:
          LABELS_BY_PR: ${{ steps.pr-labels.outputs.labelsByPR }}