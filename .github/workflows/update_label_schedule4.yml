name: Update Label Schedule4

on:
  schedule:
    - cron: '0 1 * * *'  # 매일 한국 시간 오전 10시에 실행 (UTC 시간 오전 1시)

jobs:
  update-labels:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get PR Labels
        id: pr-labels
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const labelsByPR = {};

            for (const pr of pullRequests) {
              const prNumber = pr.number;
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });
              const prLabels = labels.map(label => label.name);
              labelsByPR[prNumber] = prLabels;
            }

            core.setOutput('labelsByPR', JSON.stringify(labelsByPR));

      - name: Update Labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            async function updateLabels() {
              try {
                const labelsByPR = JSON.parse(process.env.LABELS_BY_PR);
            
                for (const prNumber in labelsByPR) {
                  const prLabels = labelsByPR[prNumber];
                  const DLabels = prLabels.filter(prLabel => prLabel.startsWith('D-'));
                  console.log('PR:',prNumber, 'D Labels:', DLabels);
                  if (DLabels.length < 1) {
                    console.log('PR:',prNumber, '라벨이없음');
                    continue;
                  }
                  
                  DLabels.forEach((DLabel) => {
                    console.log('PR:',prNumber, '삭제:', DLabel);
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: prNumber,
                      name: DLabel
                    });
                  })

                  const biggestLabelNumber = Math.max(...DLabels.map(DLabel => parseInt(DLabel.slice(2))));
                  const newLabel = `D-${biggestLabelNumber < 1 ? 0 : biggestLabelNumber - 1}`;
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    labels: [newLabel]
                  });
                  
                  console.log(`PR:${prNumber}, "D-" Label updated to "${newLabel}"`);
                }
              } catch (error) {
                console.error('Error updating labels:', error);
              }
            }

            updateLabels();
        env:
          LABELS_BY_PR: ${{ steps.pr-labels.outputs.labelsByPR }}