name: Create Release Notes

on:
  push:
    tags:
      - 'v*'  # 'v'로 시작하는 태그 푸시에 대해 트리거

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get the merged pull requests
        id: get_merged_prs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'main',
              sort: 'updated',
              direction: 'desc'
            });
            
            // Get merged PRs only
            const mergedPRs = pulls.filter(pr => pr.merged_at);

            if (mergedPRs.length === 0) {
              console.log('No merged pull requests found.');
              core.exportVariable('MERGED_PR_TITLES', '');
            } else {
              const prTitles = mergedPRs.map(pr => `- PR #${pr.number}: ${pr.title} by @${pr.user.login}`).join('\n');
              console.log('pull 목록',prTitles)
              core.exportVariable('MERGED_PR_TITLES', prTitles);
            }

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Generate Release Notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const prTitles = process.env.MERGED_PR_TITLES;
            console.log('prTitles 목록',prTitles)
            if (!prTitles) {
              console.log('No merged pull requests found.');
              return;
            }

            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', ''),
            });
            console.log('릴리즈',release)
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: `${prTitles}`,
            });
            
            core.exportVariable('RELEASE_URL', release.html_url);

      - name: Output Release URL
        run: |
          echo "Release URL: $RELEASE_URL"