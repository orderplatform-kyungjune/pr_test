name: create release note

on:
  push:
    tags:
      - 'v*'  # 'v'로 시작하는 태그 푸시에 대해 트리거

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - name: get previous tag
        id: get_previous_tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const currentTag = context.ref.replace('refs/tags/', '');
            const currentIndex = tags.findIndex(tag => tag.name === currentTag);
            
            if (currentIndex === -1 || currentIndex === tags.length - 1) {
              core.exportVariable('PREVIOUS_TAG_SHA', '');
              console.log('No previous tag found or current tag is the oldest tag.');
              return
            }
            
            const previousTag = tags[currentIndex + 1];
            core.exportVariable('PREVIOUS_TAG_SHA', previousTag.commit.sha);
            console.log('Previous Tag:', previousTag.name);

      - name: get merged pull requests
        id: get_merged_prs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const previousTagSha = process.env.PREVIOUS_TAG_SHA;

            if (!previousTagSha) {
              console.log('No previous tag found.');
              core.exportVariable('MERGED_PR_TITLES', '');
              return;
            }

            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: previousTagSha,
              head: context.sha
            });

            const mergedPRs = [];

            for (const commit of commits.commits) {
              if (commit.commit.message.includes('Merge pull request')) {
                const prNumber = commit.commit.message.match(/#(\d+)/)[1];
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                mergedPRs.push(pr);
              }
            }

            if (mergedPRs.length === 0) {
              core.exportVariable('MERGED_PR_TITLES', '');
              console.log('No merged pull requests found.');
              return
            }
            
            const featurePRs = [];
            const releasePRs = [];
            const etcPRs = [];

            for (const pr of mergedPRs) {
              if (pr.title.startsWith('Feature/') || pr.title.startsWith('feature/')) {
                featurePRs.push(`- #${pr.number}: ${pr.title} by @${pr.user.login}`);
              } else if (pr.title.startsWith('Release/') || pr.title.startsWith('release/')) {
                releasePRs.push(`- #${pr.number}: ${pr.title} by @${pr.user.login}`);
              } else {
                etcPRs.push(`- #${pr.number}: ${pr.title} by @${pr.user.login}`);
              }
            }

            const prTitles = `### Release\n${releasePRs.join('\n') || 'None'}\n---\n\n### Feature\n${featurePRs.join('\n') || 'None'}\n---\n\n### ETC\n${etcPRs.join('\n') || 'None'}`;
            core.exportVariable('MERGED_PR_TITLES', prTitles);

      - name: create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: generate release notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const prTitles = process.env.MERGED_PR_TITLES;
            if (!prTitles) {
              console.log('No merged pull requests found.');
              return;
            }
            
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', ''),
            });
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: `${prTitles}`,
            });
            
            core.exportVariable('RELEASE_URL', release.html_url);

      - name: output release url
        run: |
          echo "Release URL: $RELEASE_URL"